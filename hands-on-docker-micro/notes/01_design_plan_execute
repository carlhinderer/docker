---------------------------------------------------------------------
CHAPTER 1 - MAKING THE MOVE: DESIGN, PLAN, EXECUTE
---------------------------------------------------------------------

- The tools we will use include:

    1. Python
         To implement RESTful web services

    2. Git and Github
         To track and share changes

    3. Docker
         To use containers to standardize the operation of the microservices

    4. Kubernetes
         To coordinate the execution of multiple services

    5. Cloud Services (such as Travis CI and AWS)
         To leverage existing commercial solutions to problems



- We will also cover practices and techniques for working effectively in a 
    microservice-oriented environment:

    1. Continuous Integration
         To ensure that services are of a high quality and ready to be deployed

    2. GitOps
         For handling changes in infrastructure

    3. Observability
         For properly understanding what is happening in a live system

    4. Practices and techniques aimed at improving teamwork
         Within a single team and across multiple teams



- Web Services

    - A web service consists of:

        - 1 or more servers (physical boxes, VMs, cloud instances)

        - running a web server application (such as Nginx or Apache)

        - to direct requests directed to ports 80 or 443 toward 1 or more Python workers 
            (usually through the WSGI protocol) run by mod_wsgi (Apache), uWSGI, GNUnicorn, etc.


    - If more than one server is used, there will be a load balancer to spread the load among 
        them.  The server (or load balancer) needs to be accessible to the internet, so it
        needs to have a dedicated DNS and a public IP address.


    - Any other web framework will be similar: a frontend web server that exposes the HTTP/HTTPS
        ports, and a backend that runs the monolith in a dedicated web server.



- Liabilities of Monoliths

    1. The code will increase in size, and even with strict boundaries, developers will have a
         hard time understanding the entire code base.

    2. There is an inefficient use of resources, since each web worker will require enough 
         CPU/memory to handle any type of request.  Also, each worker may have it's own DB
         connection, even if infrequently used.

    3. There are issues with scaling the size of the development team, with more and more 
         people stepping on each others' toes.

    4. There are deployment limitations, since every concern will need to be shared across
         teams.  A deployment will bring down the entire system.

    5. There is an interdependency of technologies.  Updating dependencies can cause issues.
         Using a new type of technology is often impossible.

    6. A bug in a small part of the system can bring down the entire service.



- The Microservices Approach

    - A system with a 'microservices architecture' is a collection of loosely coupled
        specialized services that work in unison to provide a comprehensive service.

        1. Collection of specialized services
             There are different, well-defined modules

        2. Loosely coupled
             Each of the microservices can be independently deployed

        3. Work in unison
             Each microservice is capable of communicating with others

        4. Provide a comprehensive service
             Our microservice system will need to replicate the same functionality of the 
               monolith.



- Advantages of Microservices

    1. If communication is done with a standard protocol, each microservice can be programmed
         in different technologies.  HTTP requests with data encoded in JSON is the most
         standard and widely-used option.

    2. We have better resource utilization.  If one microservice requires more memory, we can
         reduce the number of worker copies.  We can decide which workers need to connect to
         the DB.

    3. Each individual service is smaller, which means it is easier to maintain, faster to add
         features, and more easy to understand.

    4. Some services can be hidden from external access.  This may improve the security of 
         sensitive data or services.

    5. Failure in one service does not necessarily mean the entire system won't be available.

    6. Each service can be developed, deployed, and maintained seprately by separate developers.



- Docker Containers

    - Docker containers are very often used to deploy microservices.  They are:

        1. Portable, since they are detached from the underlying platform and hardware

        2. Very lightweight, since a minimum amount of data needs to be included

        3. Secure, as the exposed attack surface of a container is relatively small


    - We should always remember to keep containers small and single-purpose.  If we end up adding
        several daemons and a lot of configuration, it probably needs to be split into several
        containers.

    - The 12-factor App Principles, a set of practices that have been proven successful in 
        developing web applications, are very aligned with Docker containers.

    - We should always remember that containers should be stateless.  Any state needs to be stored
        in a database, and each containers stores no persistent data.  This is one of the key
        elements for scalable web servers.

    - We use Docker for the individual microservices, and we use Kubernetes as the orchestrator
        that manages the whole cluster of services.



- Parallel Deployment and Development Speed

    - The single most important feature of microservices is the capacity to develop 
        independently.  Each service should be able to be developed, tested, and
        deployed separately from the other services.

    - Note that situations in which backwards compatibility is being broken is a time when
        strong coordination between teams is required.


    - The traditional way of dividing teams is to have an operations team that is in charge
        of infrastructure and any new deployments, since they are the only ones with access
        to the production servers.

      The microservices approach conflicts with this, since teams need control over their own
        deployments.  Kubernetes helps in this situation, since it decouples maintenance of
        infrastructure from deployment of services.



- Challenges and Red Flags

    - Systems get started as monoliths, since it is simpler and allows for quicker iteration.
        In any new company, which is pivoting and changing the code, and searching for a 
        successful business model, this is pivotal.

      However, once the system matures, the company grows.  The more developers that get 
        involved, the bigger the company gets, the more sense microservices make.


    - Moving to microservices has its own problems:

        1. Migrating to microservices requires a lot of effort, actively changes the way the
             organization operates, and will be a big investment until it starts to pay off.

        2. The switch requires cultural change, and people do not like change.  It forces
             clarification of interfaces and APIs, and this can cause particular discomfort.

        3. There is a learning curve in learning the tools and procedures.

        4. Debugging a request across services is more difficult than with a monolith.
             Reproducing bugs can be challenging.

        5. Splitting a monolith requires careful consideration.  A bad division line can cause
             services to be tightly coupled.

        6. There's an overhead in creating microservices, as there's some work that gets 
             replicated on each service.

        7. A balance has to be struck on how much freedom to give individual teams.  You want
             to avoid duplicated work and knowledge silos, but you want teams to be empowered
             and independent.

        8. In agile principles, working code is more important than comprehensive documentation.
             However, in microservices, it is important that APIs be well documented to reduce
             the amount of support between teams.  The best approach is to create self-documenting
             services.

        9. Each call to another service can increase the delay of responses.  This can produce
             latency problems.


    - Conway's Law

        Organizations that design systems are constrained to produce designs which are copies
          of the communications structures of the organization.



- Preparing and Adapting by Measuring Usage

- Strategic Planning to Break the Monolith

- The Replacement Approach

- The Divide Approach

- Change and Structured Approach

- Executing the Move

- The Load Balancer

- The Phases of Migration

     1. The Pilot Phase

     2. The Consolidation Phase

     3. The Final Phase