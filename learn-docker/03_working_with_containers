-----------------------------------------------------------
CHAPTER 3 - WORKING WITH CONTAINERS
-----------------------------------------------------------


# Docker

# Start Docker
$ sudo systemctl start docker

# Make sure Docker is running
$ docker -v


# Had to change permissions to get it working
$ sudo chmod 666 /var/run/docker.sock


# Run first container
$ docker container run alpine echo "Hello World"

    docker                # Docker CLI
    container             # Context
    run                   # Command
    alpine                # Container Image
    echo "Hello World"    # Process to run


# Another simple container
# Pings loopback address 5 times
$ docker container run centos ping -c 5 127.0.0.1



- Next, we create a container that runs a random quotes generator.  This script does that:

    while :
    do
        wget -q0- https://talaikis.com/api/quotes/random
        printf 'n'
        sleep 5
    done


    # Run in alpine container as a daemon in the background:

    $ docker container run -d --name quotes alpine \
        /bin/sh -c "while :; do wget -qO- https://talaikis.com/api/quotes/random; printf '\n'; sleep 5; done"

        # -d runs the container as a Linux daemon
        # --name is used to give the container an explicit name (one will be auto-generated otherwise)


    # Check to make sure the container is up and running
    $ docker container ls -l



- Listing Containers

    # List running containers
    $ docker container ls

    # List all containers defined on system
    $ docker container ls -a

    # Just get Ids of containers
    $ docker container ls -q


    # Get help for the list command
    $ docker container ls -h


    # Delete all containers defined on system
    $ docker container rm -f $(docker container ls -a -q)



- Stopping and Starting Containers

    # Stop container by name
    $ docker container stop quotes


    # Stop container by id
    $ export CONTAINER_ID = $(docker container ls | grep quotes | awk '{print $1}')
    $ docker container stop $CONTAINER_ID


    - When we stop a container, a SIGTERM is sent to the container.  If it hasn't been
        terminated in 10 seconds, a SIGKILL is sent.


    - Once we've stopped a container, its status changes to 'Exited'.  It can be restarted:

     # Restart container
     $ docker container start quotes



- Removing Containers

    When we run 'docker container ls -a', we see that there are quite a few containers in the
      'Exited' status.  

      # Remove a container
      $ docker container rm <container-id>
      $ docker container rm <container-name>

      # Force remov
      $ docker container rm -f <container-id>

    

- Inspecting Containers

    - Containers are runtime instances of an image and have a lot of associated data that
        characterizes their behavior.  To get more information about a specific container,
        we use the 'inspect' command.

      $ docker container inspect quotes

          [
              {
                  "Id": "c5c1c68c87...",
                  "Created": "2017-12-30T11:55:51.223271182Z",
                  "Path": "/bin/sh",
                  "Args": [
                      "-c",
                      "while :; do wget -qO- https://talaikis.com/api/quotes/random; printf '\n'; sleep 5; done"
                  ],
                  "State": {
                      "Status": "running",
                      "Running": true,
                      ...
                  },
                  "Image": "sha256:e21c333399e0...",
                  ...
                  "Mounts": [],
                  "Config": {
                      "Hostname": "c5c1c68c87dd",
                      "Domainname": "",
                      ...
                  },
                  "NetworkSettings": {
                      "Bridge": "",
                      "SandboxID": "2fd6c43b6fe5...",
                      ...
                  }
              }
          ]


    # Filter the output to get the data you need
    $ docker container inspect -f "{{json .State}}" quotes | jq 
