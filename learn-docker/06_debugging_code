-----------------------------------------------------------
CHAPTER 6 - DEBUGGING CODE RUNNING IN CONTAINERS
-----------------------------------------------------------

- Evolving and Testing Code Running in a Container

    - When developing code that will eventually be running in a container, it is usually
        best to start running it in a container at the beginning.  This will avoid 
        introducing friction into your development process.


    - This is an example of a nieve way of running and testing code in a container:

        1. Create a new folder.

             $ mkdir -p ~/fod/ch06 && cd ~/fod/ch06


        2. Create a new Node.js project.

             $ npm init


           Notice that a 'package.json' file is created:

             # File: package.json

             
               "name": "ch06",
               "version": "1.0.0",
               "description": "",
               "main": "index.js",
               "scripts": {
                 "test": "echo \"Error: no test specified\" && exit 1"
               },
               "author": "",
               "license": "ISC"
             }


        3. Install the newest version of Express.js.

             $ npm install express --save

           Which adds this section to package.json:

             "dependencies": {
               "express": "^4.17.1"
             }


        4. Create an 'index.js' file:

            # File: index.js

            const express = require('express');
            const app = express();
            
            app.listen(3000, '0.0.0.0', ()=>{
                console.log('Application listening at 0.0.0.0:3000');
            })
            
            app.get('/', (req,res)=>{
                res.send('Sample Application: Hello World!');
            })


        5. Now start the application:

             $ node index.js
             Application listening at 0.0.0.0:3000

           And can navigate to the root at http://localhost:3000.


        6. Next, we want to test the application we've developed so far by running it inside
             a container.  Here is the Dockerfile:

             # File: Dockerfile

             FROM node:latest
             WORKDIR /app
             COPY package.json ./
             RUN npm install
             COPY . .
             CMD node index.js


        7. Use the Dockerfile to build the image.

            $ docker image build -t sample-app .


        8. Run the container.

            $ docker container run --rm -it \
                                   --name my-sample-app \
                                   -p 3000:3000 \
                                   sample-app

            Application listening at 0.0.0.0:3000



- Mounting Evolving Code Into the Running Container


- Auto Restarting Code Upon Changes

    - Auto-restarting for Node.js
    - Auto-restarting for Python
    - Auto-restartign for .NET


- Line-by-line Code Debugging in a Container

    - Debugging a Node.js Application
    - Debugging a .NET  Application


- Instrumenting Your Code to Produce Meaningful Logging Information

    - Instrumenting a Python Application
    - Instrumenting a .NET Application


- Using Jaeger to Monitor and Troubleshoot