------------------------------------------------------------------
| CHAPTER 3 - WORKING WITH CONTAINERS                            |
------------------------------------------------------------------

- Running Containers

    - To make sure Docker is running:

        # Start Docker
        $ sudo systemctl start docker
    
        # Make sure Docker is running
        $ docker -v
    
    
    - Note that I had to change permissions to get this working originally, but switching to
        lightdm from gdm solved the issue, so it's no longer necessary.

        # Had to change permissions to get it working initially
        $ sudo chmod 666 /var/run/docker.sock
    
    
    - To run our first container:

        # Run first container
        $ docker container run alpine echo "Hello World"
    
        docker                # Docker CLI
        container             # Context
        run                   # Command
        alpine                # Container Image
        echo "Hello World"    # Process to run


    - Another simple container:

        # Pings loopback address 5 times
        $ docker container run centos ping -c 5 127.0.0.1



- Creating and Running Containers

    - Next, we create a container that runs a random quotes generator.  If we run this script,
        we see that 'Random Quote' gets printed in the terminal every 5 seconds.
    
        while [ true ]
        do
            wget -qO- http://quotes.stormconsultancy.co.uk/random.json
            sleep 5
        done
    
    
    - Now, we want to  run the same container as a Linux daemon in the background.

        The --name option specifies a name for the container (must be unique system-wide,
          and will be auto-generated if not specified).

        The -d option funs the container as a Linux daemon.


        # Run in alpine container as a daemon in the background
        $ docker container run -d --name quotes alpine 
            /bin/sh -c \
            "while [ true ] ; do wget -qO- http://quotes.stormconsultancy.co.uk/random.json ; \
             printf '\n' ; sleep 5 ; done"
    
        # Check to make sure the container is up and running
        $ docker container ls -l



- Listing Containers

    - To list the containers present on the host:

        # List running containers
        $ docker container ls

        # List all containers defined on system
        $ docker container ls -a

        # Just get Ids of containers
        $ docker container ls -q


        # Get help for the list command
        $ docker container ls -h



- Stopping and Starting Containers

    - A docker container has 3 posible states:

        1. Created
        2. Running
        3. Exited


    - Sometimes, we want to temporarily stop a running container.  We can do this with the
        'stop' command.

      It will usually take about 10 seconds for the stop command to be executed.  This is 
        because Docker sends a Linux SIGTERM signal to the main process running inside the
        container.  If the process doesn't react to the signal and terminate itself within
        10 seconds, the container is killed with a SIGKILL.


        # Stop container by name
        $ docker container stop quotes

        # Stop container by id
        $ export CONTAINER_ID=$(docker container ls | grep quotes | awk '{print $1}')
        $ docker container stop $CONTAINER_ID


    - Once we've stopped a container, its status changes to 'Exited'.  It can be restarted:

        # Restart container
        $ docker container start quotes



- Removing Containers

    - When we run 'docker container ls -a', we see that there are quite a few containers in the
        'Exited' status.  

      # Remove a container
      $ docker container rm <container-id>
      $ dockder container rm <container-name>

      # Force remove
      $ docker container rm -f <container-id>


      # Delete all containers defined on system
      $ docker container rm -f $(docker container ls -a -q)

    

- Inspecting Containers

    - Containers are runtime instances of an image and have a lot of associated data that
        characterizes their behavior.  To get more information about a specific container,
        we use the 'inspect' command.

      $ docker container inspect quotes

          [
              {
                  "Id": "c5c1c68c87...",
                  "Created": "2017-12-30T11:55:51.223271182Z",
                  "Path": "/bin/sh",
                  "Args": [
                      "-c",
                      "while :; do wget -qO- https://talaikis.com/api/quotes/random; 
                        printf '\n'; sleep 5; done"
                  ],
                  "State": {
                      "Status": "running",
                      "Running": true,
                      ...
                  },
                  "Image": "sha256:e21c333399e0...",
                  ...
                  "Mounts": [],
                  "Config": {
                      "Hostname": "c5c1c68c87dd",
                      "Domainname": "",
                      ...
                  },
                  "NetworkSettings": {
                      "Bridge": "",
                      "SandboxID": "2fd6c43b6fe5...",
                      ...
                  }
              }
          ]


    # Filter the output to get the data you need
    $ docker container inspect -f "{{json .State}}" quotes | jq 



- Exec Into a Running Container

    - Sometimes, we want to run another process inside an already-running container.  For
        instance, maybe we want to debug a misbehaving container.

        # Get a shell inside the container
        # Again, we can use the container name or id
        $ docker container exec -i -t quotes /bin/sh

        -i is for interactive mode
        -t is for getting a terminal emulator


        # Get list of processes on a container
        $ docker container exec quotes ps


    - We can run processes as daemon using the -d flag, and we can define environment variables
        using the -e flag.

        # Define an environment variable
        $ docker container exec -it -e MY_VAR="Hello World" quotes /bin/sh



- Attaching to a Running Container

    - We can use the 'attach' command to attach our terminal's standard input, output, and error
        to a running container using the ID or name of the container.

        $ docker container attach quotes


    - To quit the container without stopping or killing it, we press Cntl+P, Cntl+Q to detach.


    - In this example, we run the alpine version of the nginx web server.

        $ docker run -d --name nginx -p 8080:80 nginx:alpine

        -p 8080:80 opens port 8080 on the host for access to the nginx web server running inside
           the container


        # Now, we check to see whether we can access Nginx
        $ curl -4 localhost:8080


        # Now, let's attach our terminal to the nginx container to observe what's happening
        $ docker container attach nginx

        # Open new terminal to send requests
        $ for n in {1..10}; do curl -4 localhost:8080; done

        # Clean up container afterwards
        $ docker container rm nginx



- Retrieving Container Logs

    - When running inside a container, an application should preferably output to STDOUT and 
        STDERR and not into a file.  This way, Docker can collect this information and keep it
        ready for consumption by a user or any other external system.


    -  To access the logs of a given container, we can use the 'docker container logs' command.  
        
        # Retrieve the whole log produced by the application
        $ docker container logs quotes

        # Retrieve the last 5 log entries
        $ docker container logs --tail 5 quotes

        # Follow the log as its produced
        $ docker container logs --tail 5 --follow quotes



- Logging Drivers

    - Docker has multiple logging mechanisms to help us get information from running 
        containers.  These are called 'logging drivers'.  

      Which logging driver is used can be configured at the Docker daemon level.  The
        default driver is 'json-file'.  Note that the 'docker container logs' command
        only works with json-file and journald.


    - Here are the natively supported logging drivers:

        Driver        Description
        --------------------------------------------------------------------------------
        none          No log output for the specific container is produced.

        json-file     This is the default driver. The logging information is stored in 
                        files, formatted as JSON.

        journald      If the journals daemon is running on the host machine, we can use 
                        this driver. It forwards logging to the journald daemon.

        syslog        If the syslog daemon is running on the host machine, we can configure 
                        this driver, which will forward the log messages to the syslog 
                        daemon.

        gelf          When using this driver, log messages are written to a Graylog Extended
                        Log Format (GELF) endpoint. Popular examples of such endpoints are 
                        Graylog and Logstash.

        fluentd       Assuming that the fluentd daemon is installed on the host system, this 
                        driver writes log messages to it.



- Using a Container-Specific Logging Driver

    - We have seen that the logging driver can be set globally in the Docker daemon config
        file.  We can also define the logging driver on a container-by-container basis.  


    - For instance, here we will use the 'none' logging driver:

        # Set the logging driver
        $ docker container run --name test -it --log-driver none \
            busybox sh -c 'for N in 1 2 3; do echo "Hello $N"; done'

        Hello 1
        Hello 2
        Hello 3


        # If we try to get the logs, we get an error
        $ docker container logs test
        Error response from daemon: configured logging driver does not support reading



- Changing the Default Logging Driver

    - To change the default driver, we edit the '/etc/docker/daemon.json' file.

        # Update the config file
        # /etc/docker/daemon.json
        {
          "Log-driver": "json-log",
          "log-opts": {
            "max-size": "10m",
            "max-file": 3
          }
        }


        # Send the SIGHUP signal to the Docker deamon so it picks up the config file changes
        $ sudo kill -SIGHUP $(pidof dockerd)  



- Anatomy of Containers

    - Containers are specially encapsulated and secured processes running on the host system.
        They leverage Linux primitives such as namespaces and cgroups.


    - Architecture

                        REST Interface
                        Docker Engine
        libcontainerd   libnetwork   graph   plugins
        -------------------------------------------------------------
        containerd + runc
        -------------------------------------------------------------
        cgroups  Namespaces  LayerCapabilities  OtherOsFunctionality
                 (pid,net,    (Union
                  ipc,mnt,     filesystem)
                  ufs)
                         Linux


    - Namespaces

        - A 'namespace' is an abstraction of global resources such as filesystems, network
            access, process tree, or the system group ids.

          A Linux system is initialized with a single instance of each namespace type.  After
            initialization, additional namespaces can be created or joined.


        - Linux namespaces originated in the 2.4.19 kernel (2002).  In kernel version 3.8 (2013),
            user namespaces were added, paving the way for containers.

            - Using filesystem namespaces gives a running process the illusion that it has its
                own sepearate filessystem.

            - Using the user id namespace means we can define a user 'jdoe' many times on the 
                same system, as long as they are in separate namespaces.

            - The pid namespace keeps processes in one container from seeing or interacting with
                processes in other containers.


        - The process tree on a Docker host looks like:

                            1    /sbin/init
                            |
                           121   /usr/bin/dockerd
                            |
                           154   docker-containerd
                          /   \
                        194   234     docker-containerd-shim
                         |     |
                 CONTAINER-1  CONTAINER-2
                      |              |
                     334            267
                /usr/bin/java     redis-server


    - Control Groups (cgroups)

        - Linux cgroups are used to limit, manage, and isolate resource usage of collections
            of processes running on a host.  Resources include CPU time, system memory, 
            network bandwidth, etc.

        - Engineers at Google originally implemented this feature starting in 2006.  It was 
            merged into the Linux kernel in version 2.6.24 (2008).


    - Union Filesystem (UnionFS)

        - The UnionFs forms the backbone of what is now known as container images.  It allows
            files and directories of distinct filesystems to be overlaid to form a single
            coherent file system.  

          In this context, the individual filesystems are called 'branches'.  Contents of
            directories that have the same path within the merged branches will be seen together
            in a single merged directory.


    - Container Plumbing

        - runc is a lightweight, portable container runtime.  It provides full support for
            Linux namespaces, native Linux security features, and cgroups.

          It is a tool for spawning and running containers according to the OCI (Open Container
            Initiative), governed by the OCP (Open Container Project).


        - Whereas runc is a low-level implementation of a container runtime, containerd builds
            on top of it.  It adds higher-level features, such as image transfer and storage,
            container execution and supervision, and network and storage attachment.

          With this, it manages the complete lifecycle of containers.