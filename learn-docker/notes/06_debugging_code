------------------------------------------------------------------
| CHAPTER 6 - DEBUGGING CODE RUNNING IN CONTAINERS               |
------------------------------------------------------------------

- Evolving and Testing Code Running in a Container

    - When developing code that will eventually be running in a container, it is usually
        best to start running it in a container at the beginning.  This will avoid 
        introducing friction into your development process.


    - This is an example of a nieve way of running and testing code in a container:

        1. Create a new folder.

             $ mkdir -p ~/fod/ch06 && cd ~/fod/ch06


        2. Create a new Node.js project.

             $ npm init


           Notice that a 'package.json' file is created:

             # File: package.json
             ----------------------------
             {
               "name": "ch06",
               "version": "1.0.0",
               "description": "",
               "main": "index.js",
               "scripts": {
                 "test": "echo \"Error: no test specified\" && exit 1"
               },
               "author": "",
               "license": "ISC"
             }


        3. Install the newest version of Express.js.

             $ npm install express --save

           Which adds this section to package.json:

             "dependencies": {
               "express": "^4.17.1"
             }


        4. Create an 'index.js' file:

            # File: index.js

            const express = require('express');
            const app = express();
            
            app.listen(3000, '0.0.0.0', ()=>{
                console.log('Application listening at 0.0.0.0:3000');
            })
            
            app.get('/', (req,res)=>{
                res.send('Sample Application: Hello World!');
            })


        5. Now start the application:

             $ node index.js
             Application listening at 0.0.0.0:3000

           And can navigate to the root at http://localhost:3000.


        6. Next, we want to test the application we've developed so far by running it inside
             a container.  Here is the Dockerfile:

             # File: Dockerfile

             FROM node:latest
             WORKDIR /app
             COPY package.json ./
             RUN npm install
             COPY . .
             CMD node index.js


        7. Use the Dockerfile to build the image.

            $ docker image build -t sample-app .


        8. Run the container.

            $ docker container run --rm -it \
                                   --name my-sample-app \
                                   -p 3000:3000 \
                                   sample-app

            Application listening at 0.0.0.0:3000


        9. Now, stop the container.  Add a new endpoint to the 'index.js' file.

            # Add to index.js

            const hobbies = [
              'Swimming', 'Diving', 'Jogging', 'Cooking', 'Singing'
            ];
            
            app.get('/hobbies', (req,res)=>{
              res.send(hobbies);
            })


        10. Create a new version of the container image:

             $ docker image build -t sample-app .


            And re-run the container from the new image:

             $ docker container run --rm -it \
                                    --name my-sample-app \
                                    -p 3000:3000 \
                                    sample-app



- Mounting Evolving Code Into the Running Container

    - Here, we mount a host folder, /projects/sample-app, into a container at /app

        # Mount host folder to container
        $ docker container run --rm -it \
                                 --volume /projects/sample-app:/app \
                                 alpine /bin/sh


        # Mount the current working directory to container
        $ docker container run --rm -it \
                               --volume $(pwd):/app \
                               -p 3000:3000 \


    - Now, we can test to see if it works:

        1. Add new changes to 'index.js'.

             # Add to index.js

             app.get('/status', (req,res)=>{
               res.send('OK');
             })


        2. Run the container again, without rebuilding the image.

             # docker container run --rm -it \
                                    --name my-sample-app \
                                    --volume $(pwd):/app \
                                    -p 3000:3000 \
                                    sample-app


        3. Verify that the new changes are there.

             $ curl localhost:3000/status
             OK



- Auto Restarting Code Upon Changes

    - We have reduced a lot of friction by not having to rebuild the image each time we make
        a change, but we still have to stop and restart the container to reflect a change,
        since the running application doesn't know to restart.

      We can further reduce friction by automatically restarting the application when changes
        are made.



- Auto-restarting for Node.js

    - 'nodemon' is a popular tool for automatically restarting Node.js applications.

        $ npm install -g nodemon


    - Now, add a new route to index.js

        app.get('/colors', (req,res)=>{
         res.send(['red','green','blue']);
        })


    - In the console, we should see the application restarting automatically.  

        # Changes are reflected
        $ curl localhost:3000/colors
        ["red","green","blue"]


    - Now, we want to use nodemon in a container.  Since we'll be running the 'nodemon' 
        command to start the application instead of 'node index.js', we'll need to 
        create a new Dockerfile.

        # File: Dockerfile-dev

        FROM node:latest          
        RUN npm install -g nodemon
        WORKDIR /app
        COPY package.json ./
        RUN npm install
        COPY . .
        CMD nodemon


    - Now, we can build our development image:

        $ docker image build -t sample-app-dev -f Dockerfile-dev .

      And run the container:

        $ docker container run --rm -it \
                               -v $(pwd):/app \
                               -p 3000:3000 \
                               sample-app-dev



- Auto-restarting for Python

    - First, add a new directory for the Python application.

        $ mkdir -p ~/fod/ch06/python && cd ~/fod/ch06/python


    - Now, add a simple Flask application.

        # File: main.py

        from flask import Flask
        app = Flask(__name__)
         
        @app.route("/")
        def hello():
          return "Hello World!"
         
        if __name__ == "__main__":
          app.run()


    - Add a requirements.txt and Dockerfile.

        # File: requirements.txt
        -------------------------------
        flask

        
        # File: Dockerfile
        -------------------------------
        FROM python:3
        WORKDIR /app
        COPY requirements.txt ./
        RUN pip install -r requirements.txt
        COPY . .
        ENV FLASK_APP=main.py
        CMD flask run --host=0.0.0.0


    - And we can build our image and run our container.

        $ docker image build -t sample-py-app .


      And re-run the container from the new image:

        $ docker container run --rm -it \
                               --name my-sample-py-app \
                               -p 5000:5000 \
                                sample-py-app


    - We can use nodemon to auto-reload Python applications also.

        $ nodemon main.py

      
    - However, in our case, we'll just use Flask's built-in auto-reloading.

        # Dockerfile-dev
        -------------------------------
        FROM python:3
        WORKDIR /app
        COPY requirements.txt ./
        RUN pip install -r requirements.txt
        COPY . .
        ENV FLASK_APP=main.py
        ENV FLASK_ENV=development
        CMD flask run --host=0.0.0.0


    - Now, we'll build and run the new image.

        $ docker image build -t sample-py-app-dev -f Dockerfile-dev .

        $ docker container run --rm -it \
                               --name my-sample-py-app-dev \
                               -p 5000:5000 \
                               -v $(pwd):/app sample-py-app \
                               sample-py-app-dev


    - Now, we can make some changes.

        # Add to main.py
        from flask import jsonify
 
        @app.route("/colors")
        def colors():
            return jsonify(["red", "green", "blue"])


      And we can test to see that the changes have been reflected without having to manually 
        restart the application.

        $ curl localhost:5000/colors



- Line-by-line Code Debugging in a Container

    - Note that line-by-line debugging inside a container should be a last resort, when 
        you are trying to figure out what is going on.

      Ideally, you would have unit and integration tests already running in a container,
        which would catch most bugs and preclude the need for debugging.



- Instrumenting Your Code to Produce Meaningful Logging Information

    - Once an application is running in production, it is impossible to interactively debug.
        The best way to figure out why problems are happening is with detailed logging
        information.  


    - Most log messages are organized by severity level.  Here are the common ones:

         Security levels     Explanation
         ---------------------------------------------------------------------------------------
         TRACE               Very fine-grained information. At this level, you are looking 
                               at capturing every detail possible about your application's 
                               behavior.

         DEBUG               Relatively granular and mostly diagnostic information helping to 
                               pin down potential problems if they occur.

         INFO                Normal application behavior or milestones.

         WARN                The application might have encountered a problem or you detected 
                               an unusual situation.

         ERROR               The application encountered a serious issue. This most probably 
                               represents the failure of an important application task.

         FATAL               The catastrophic failure of your application. The immediate shutdown 
                               of the application is advised.


    - Most logging libraries allow a developer to develop different log sinks (destinations for
        log messages).  Popular sinks include file sinks or streaming to the console.

      When working with containerized applications, it is recommended to always direct logging
        output to STDOUT.  Docker will then make this information available via the 
        'docker container logs' command.



- Instrumenting a Python Application

    - First, add this code to the top of main.py:

        # Add above other code in main.py

        import logging

        logger = logging.getLogger("Sample App")
        logger.setLevel(logging.WARN)

        # Create a console handler (StreamHandler outputs to STDOUT)
        ch = logging.StreamHandler()

        # Create a formatter and add it to the handlers
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)


    - Now, we can add a logging message to the 'hello()' function.  Since we set the log level 
        to WARN, our info messages will not be displayed in the console.

        # Add INFO-level message
        @app.route("/")
        def hello():
            logger.info("Accessing endpoint '/'")
            return "Hello World!"


    - If we add a WARN-level message, the log message will be output to the console.

        # Add WARN-level message
        @app.route("/colors")
        def colors():
            logger.warning("Warning, you are accessing /colors")
            return jsonify(["red", "green", "blue", "orange"])



- Using Jaeger to Monitor and Troubleshoot

    - When we want to monitor and troubleshoot transactions in a complex distributed system,
        we need something a bit more powerful.  

      Preferably, we need the capability to trace a single request or transaction end-to-end,
        as it flows through the system composed of many services.  Ideally, we would want to
        capture other interesting metrics, like the total time for the request, also.


    - When using Jaeger, you run a central Jaeger server component and each application 
        component uses a Jaeger client that will forward debug and tracing information to the
        Jaeger server.  

      There are Jaeger clients for all major programming languages and frameworks.