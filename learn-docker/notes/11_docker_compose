------------------------------------------------------------------
| CHAPTER 11 - DOCKER COMPOSE                                    |
------------------------------------------------------------------

- Declarative vs Imperative

    - Docker Compose is a tool used to run and orchestrate containers running on a single
        host.  This is useful for:

          - Development
          - CI
          - Automated testing
          - Manual QA
          - Demos

    - Docker Compose uses YAML files for configuration.  These files provide a declarative
        way for describing and running a containerized application.


    - Imperative = programmer must specify exact procedure to be followed

    - Declarative = specify desired state, application figures out how to achieve it



- Running a Multi-Service App

    - Here is an example of a Docker Compose file:

        # docker-compose.yml
        ------------------------------------
        version: "2.4"
        services: 
          web:
            image: fundamentalsofdocker/ch11-web:2.0
            build: web
            ports:
            - 80:3000
          db:
            image: fundamentalsofdocker/ch11-db:2.0
            build: db
            volumes:
            - pets-data:/var/lib/postgresql/data
        volumes: 
          pets-data:


        - 'version' is the version of the Docker Compose format we're using
        - 'ports' maps container port 3000 to host port 80


    - Building Images with Docker Compose

        Now, we can navigate to the directory where the 'docker-compose.yml' file is
          stored and build the images.

          $ docker-compose build



- Running an Application with Docker Compose

    - Now, we can run the services.

        $ docker-compose up


    - In the output, we can see that Docker Compose:

        1. Creates a bridge network
        2. Creates a volume
        3. Creates the 2 services and attaches them to the network.


    - To stop the application, we can just press Cntl + C


    - We can also run the application in the background with the '-d' option.  All
        containers will run as daemons.

        $ docker-compose up -d


    - To stop and clean up the application:

        # Stop and remove containers and network
        $ docker-compose down

        # Remove the volume
        $ docker volume rm ch11_pets-data

        # Remove container, network and volume in single command
        $ docker-compose down -v


    - By default, Docker Compose prefixes all names with the name of the parent folder
        they are stored in (in this case 'ch11').  To use a different name, the '-p'
        option is used.

        # Set project name to 'my-app' instead
        $ docker-compose -p my-app up



- Scaling a Service

    - Now, let's say we want to have multiple instances of our 'web' container.  The 
        only problem is that they will all try to use the same port.  To fix this, we
        make a change to the 'docker-compose.yml' where we allow the host ports to
        be chosen for us.

        # docker-compose.yml
        ------------
        services:  
          web:    
            image: fundamentalsofdocker/ch11-web:2.0
            build: web
            ports:
              - 3000


    - And we can start our application with 3 instances of the 'web' container.

        $ docker-compose up -d --scale web=3


    - To verify all 3 are running:

        $ docker-compose ps



- Building and Pushing an Application

    - We can also use the 'docker-compose build' command to build the images of the
        applications defined in the docker-compose.yml file.  We'll set the 'build'
        option of each component to the name of the folders the Dockerfiles are
        expected to be found in.

        # docker-compose.dev.yml
        ---------------------------------
        version: "2.4"
        services:  
          web:    
            build: web    
            image: fundamentalsofdocker/ch11-web:2.0    
            ports:      
              - 80:3000
          db:    
            build: db    
            image: fundamentalsofdocker/ch1-db:2.0    
            volumes:      
              - pets-data:/var/lib/postgresql/data
        volumes:  
          pets-data:


    - To build the application:

        $ docker-compose -f docker-compose.dev.yml build


    - Now, we can push the images to DockerHub.

        $ docker login -u username -p password
        $ docker-compose -f docker-compose.dev.yml push



- Using Docker Compose Overrides

    - We can use overrides if we have different environments that need specific
        config settings.  First, we define a base Docker Compose file.

        # docker-compose.base.yml
        ---------------------------------
        version: "2.4"
        services:
          web:
            image: fundamentalsofdocker/ch11-web:2.0
          db:
            image: fundamentalsofdocker/ch11-db:2.0
            volumes:      
              - pets-data:/var/lib/postgresql/data
        volumes:
          pets-data:


    - Now, we create an override file for our CI server.

        # docker-compose-ci.yml
        ---------------------------------
        version: "2.4"
        services:
          web:
            build: web
            ports:      
              - 5000:3000    
            environment:     
              POSTGRES_PASSWORD: ci-pass  
          db:    
            build: db
            environment:      
              POSTGRES_PASSWORD: ci-pass


    - 