---------------------------------------------------------------------
CHAPTER 1 - ARCHITECTURAL PATTERNS
---------------------------------------------------------------------

- Trends and Transitions

    - Prominent trends happening in ICT today include:

        1. IT industrialization through cloud computing

        2. IT compartmentalization through virtualization and containerization

        3. IT consumerization through handhelds, wearables, mobiles, etc

        4. Extreme and deep connectivity among all kinds of physical, electrical, mechanical,
             and electronic systems throught the IoT

        5. Cognitive IT to empower our everyday systems to be congnitive of their actions
             and reactions


    - With everything getting connected to each other, the amount of data getting generated,
        collected, cleansed, and crunched goes up exponentially.  There are integrated
        platforms for big, fast, streaming, and IoT data analytics to extricated useful
        information out of data heaps.

      The database paradigm is going through a slew of changes and challenges.


    - The middleware domain is also changing as there are multiple heterogeneous systems that
        need to be integrated and work together.


    - Businesses expect their IT service providers to be innovative, transformative, and
        disruptive in order to achieve more with less.



- Software Patterns

    - Software architecture is used to moderate the rising complexity of sortware systems.
        It becomes even more important if new modules are being added.


    - Architectures are generally decided by 3 crucial aspects:

        1. The participating components
        2. The distinct capabilities of each of those components
        3. The connectivity between these components



- Ingredients of a Software Pattern

    1. Name
         A meaningful and memorable way to refer to the pattern

    2. Problem
         Concise description of the problem at hand

    3. Context
         The initial state before the pattern is applied

    4. Forces
         Describes the relevant forces and constraints and how they interact/conflict

    5. Solution
         Clearly explains how to achieve the intended goals and objectives

    6. Resulting Context
         The state after the pattern has been applied

    7. Examples
         A few sample applications to illustrate each of the elements

    8. Rationale
         Give a convincing explanation of the pattern and its components

    9. Related Patterns
         Other patterns similar to this one

    10. Known Uses
         Known applications of the pattern in existing systems



- Types of Software Patterns

    - An 'architecture pattern' expresses a fundamental structural organization for complex
        systems.  It provides a set of predefined susbsystems and their responsibilities.

    - A 'design pattern' provides a scheme for refining the components of a system.  



- Software Architecture Patterns

    - Problems with Monoliths

        1. Scalability
             Monolithic applications are designed to run on a single and powerful system within
               a process.  Increasing the application's speed or capacity requires switching
               to newer and faster hardware.

        2. Reliability and Availability
             Any faults or bugs within a monolith can take the entire application offline.

        3. Agility
             Monolithic codebases become increasingly complex as new features are added, and 
               release cycles are measured in longer and longer periods.


    - Software patterns we will look at include:

        - OOA
        - CBD
        - DDD
        - Client/server architecture
        - Multi-tier distributed architectures
        - Layered/tiered architectures
        - EDA
        - SOA
        - SOI
        - Event-driven, service-oriented architecture



- OOA (Object-Oriented Architecture)

    - Objects are fundamental building blocks.  Then encapsulate properties and tasks in an
        organized manner.  They communicate with each other through well-defined interfaces.

    - The standard OOP principles (Inheritance, Polymorphism, Encapsulation) come in handy
        when producing modular and reusable software applications.



- CBD (Component-Based Assembly) Architecture

    - Components expose well-defined interfaces for other components to find and communicate.
        Components are reusable, replacable, substitutable, extensible, and independent.

    - Design patterns such as the Dependency Injection pattern or Service Locator pattern can
        be used to manage dependencies between components and provide loose coupling and 
        reuse.

    - AOP (Aspect-Oriented Programming) aims to increase modularity by separating cross-cutting
        concerns.  Logging is the canonical example of this.

    - ASOE (Agent-Oriented Software Engineering) is a paradigm that uses externally specified
        agents and messaging instead of objects interacting.



- DDD (Domain-Driven Design) Architecture

    - Domain-driven design is an object-oriented approach to designing software based on
        the business domain, its elements and behaviors, and the relationships between
        them.  

    - A domain model is created by business domain experts, and is created in the language
        of the business domain.

    - DDD is good if we have a complex domain and wish to improve understanding of it among
        the development team.



- Client/Server Architecture

    - This pattern segregates the system into 2 main applications, where the client makes
        requests to the server.  In many cases, the server is a database with application
        logic.  

    - 2-Tier 

        Client -> TCP/IP -> Server

    - The P2P (Peer-to-Peer) pattern allows the client and server to swap their roles.  Each
        system can be either a client or server.


    - Benefits of the client/server pattern include:

        1. Higher Security
             Since data is stored on the server, not the clients

        2. Centralized Data Access
             Since data is stored only on the server, access and updates to data are far easier

        3. Ease of Maintenance
             We can spread the service across multiple machines for updates, scalability, and
               availability.



- Multi-tier Distributed Computing Architecture

    - Adding multiple tiers has long been a goal.  Web, cloud, mobile, and other 
        customer-facing applications use N-tier architectures.

    - Components can be integrated through messages or RPCs (Remote Procedure Calls), 
        RMIs (Remote Method Invocations), CORBA (Common Object Request Broker Architecture),
        EJBs (Enterprise Java Beans), etc.



- Layered/Tiered Architecture

    - This is an improvement over the client/server pattern, and is the most commonly used
        architectural pattern.  

    - The most common pattern is:

        1. Presentation/UI Layer (ie Web Browser)
        2. Business Logic Layer (ie App/Web Server)
        3. Data Persistence Layer (ie RDBMS)

    - The MVC pattern is commonly used in production-grade web applications.



- EDA (Event-Driven Architecture)

    - The client/server pattern has generally used the request-reply method of client/server
        communication.  The communication is also synchronous.  The client must wait for
        a response from the server.

    - The world is eventually becoming event-driven.  Instead of request-reply, we have
        fire-forget.  The communication is asynchronous.  There is no need for participating
        applications to be online all the time.  EDA leads to highly decoupled systems.

    - An event may signify a problem, an opportunity, a deviation, a state change, or a
        threshold reached.

    - Every event has an Event Header (id, event type, name, creator, timestamp) and an
        Event Body (describes what happened).

    - There are event processing engines, MoM (Message Oriented Middleware) solutions such as
        messages queues and brokers to collect event data and messages.



- 2 Main Topologies in Event-Driven Architectures

    - Mediator Topology

        Has a single event queue and a mediator which directs each of the events to relevant
          event processors.  


                                                         Event Processor
                                                     /
          Events  -->  Event Queue  -->  Mediator  ---   Event Processor
                                                     \
                                                         Event Processor


    - Broker Topology

        Has no event queue.  Event processors are responsible for obtaining events, processing,
          and publishing another event indicating the end.


                        Event  Event  Event
                         Proc   Proc   Processor
                             \   |   /
          Events  -->       Event Broker
                             /   |   \
                        Event   Event  Event
                         Proc    Proc   Processor



- Major Issues With EDA

    - The EDA pattern lacks the atomicity of transactions since there is no execution sequence
        of events.  Results are expected to be provided at a later time, for instance through
        callbacks.

    - Testing an EDA system is harder due to the asynchronous nature of the processing.  



- SOA (Service-Oriented Architecture)

    - Software systems and their subsystems are increasingly expressed and exposed as services.
        Services are:

        1. Self-defined
        2. Autonomous
        3. Interoperable
        4. Publicly Discoverable
        5. Assessable
        6. Accessible
        7. Reusable
        8. Compostable


    - If a service is used by multiple other services, formalizing the service with a contract is
        paramount.  This includes QoS attributes such as availability, scalability, security, etc.

    - SOA enables application functionality to be provided as a set of services.



- SOI (Service-Inspired Integration)

    - Services can integrate disparate and ditributed applications and data sources.  The 
        ESB (Enterprise Service Bus) is the service middleware that enables service-based
        integration of multiple assets and resources.

    - The ESB facilitates interconnectivity, routing, remediation, enrichment, governance,
        etc.  The ESB is the integration middleware for any service environment, where the
        message is the basic unit of interaction between services.  


    - For an example:

        1. Application A is only capable of exporting files to a directory.

        2. Application B would like to get some information out of an exported file in a SOAP
             message over HTTP.  

        3. The ESB can implement a 'message flow' that is triggered by the SOAP request message
             from Application B and read the requested information from the file created by
             Application A with a file adapter.



- Event-driven Service-oriented Architecture

    - Today, most SOA implements synchronous request-response interaction patterns to connect
        different and distributed processes.  It does lead to tight coupling of application
        functions due to the synchronous communication.

    - Enterprises are becoming increasingly dynamic and real-time in their interactions.  SOA
        is not good enough to handle real-time events asynchronously.  

    - To get the best of both worlds, a new pattern of event-driven SOA is gaining attention.



- The EDA Fundamental Principles

    - In an asynchronous push-based messaging pattern, the EDA model builds on the pub/sub model
        to push a variety of real-time notifications and alerts out to the subscribed listeners
        in a fire-and-forget fashion.  

      This neither blocks nor waits for a synchronous response.  Also, this is a unidirectional
        and asynchronous pattern.


    - Autonomous Messages

        - Events are communicated in the form of autonomous messages.  That is, each message 
            contains just enough details to represent a unit of work.  

        - Event messages should not require any additional context. They should not require any 
            dependency on in-memory state of the connected applications.

        - The event message is simply intended to communicate the business state transitions
            of each application, domain, or workgroup within an enterprise.


    - Decoupled and Distributed Systems

        - The EDA pattern logically decouples connected systems.  SOA guarantees loose and 
            light coupling.  The middleware (ESB) takes care of unobtrusively delivering the
            message to the target application.

        - The transactions load of one system does not need to influence or depend on the 
            service levels of downstream systems.


    - Receiver-Driven Flow Control

        - The EDA pattern shifts control-flow responsiblilty away from an event source (or 
            sender system) and distributes/delegates it to event receivers.



- The ED-SOA Composite Pattern Benefits

    - Effective Data Integration

        - In synchronous request-driven architecture, the focus is on process-oriented 
            integration.  This means that data integration is not natively supported.  

        - But in the case of EDA, data integration is intrinsically accomplished, since the 
            message is the base unit of collaboration and communication.


    - Timeliness and Trustworthiness

        - Events are propogated to all the participating applications in real-time.  This timely
            exchange allows systems to have the most accurate and recent view of the business
            state.


    - Improved Scalability and Sustainability

        - Asynchronous systems tend to be more scalable than synchronous systems.  

        - Message queues and brokers can be made more stateless, reducing the overall complexity
            of distributed systems.



- Microservices Architecture

    - The SOA model relies on a shared data model with multiple hierarchies.  The sharing of
        databases tends to create tight coupling between services and other system components.

      For instance, if a few REST services are tightly coupled with a backend database, and if
        there is any change made on the database schema, all the services will need to be
        retested with the new schema.


    - The microservices pattern is a fast-growing architectural style.  Microservices are built
        on the concept of 'bounded context', which leads to a self-contained association between
        a single service and its data.

      Every microservice has its own data source, which can be a SQL database, a NoSQL database,
        an in-memory cache, etc.


    - Docker containers have emerged as the most appropriate runtime for microservices.



- Event-Driven Microservices Patterns

    - Microservice applications are being enable to be event-driven.  For instance, the 'event
        stream' pattern is increasing in popularity.


    - Messaging technologies that can be used include Apache Kafka, RabbitMQ, or even event-driven
        NoSQL data grids like Apache Geode.


    - In the MSA approach, a common architecture pattern is event sourcing using an append-only data
        stream such as Kafka or MapR streams (which implements Kafka).

      Events are grouped into logical collections of events called 'topics'.  Topics are partitioned
        for parallel processing.  We can think of a partitioned topic as a queue.

      Events are delivered in the order they are received.  Unlike a queue, events are persisted and
        remain on the partition, available to other consumers, even after they are delivered.

      Older messages are automatically deleted based on the stream's time-to-live setting.